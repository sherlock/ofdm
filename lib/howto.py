# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

import _howto
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class PySwigIterator(object):
    """Proxy of C++ PySwigIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _howto.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args, **kwargs):
        """value(self) -> PyObject"""
        return _howto.PySwigIterator_value(*args, **kwargs)

    def incr(*args, **kwargs):
        """incr(self, size_t n=1) -> PySwigIterator"""
        return _howto.PySwigIterator_incr(*args, **kwargs)

    def decr(*args, **kwargs):
        """decr(self, size_t n=1) -> PySwigIterator"""
        return _howto.PySwigIterator_decr(*args, **kwargs)

    def distance(*args, **kwargs):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _howto.PySwigIterator_distance(*args, **kwargs)

    def equal(*args, **kwargs):
        """equal(self, PySwigIterator x) -> bool"""
        return _howto.PySwigIterator_equal(*args, **kwargs)

    def copy(*args, **kwargs):
        """copy(self) -> PySwigIterator"""
        return _howto.PySwigIterator_copy(*args, **kwargs)

    def next(*args, **kwargs):
        """next(self) -> PyObject"""
        return _howto.PySwigIterator_next(*args, **kwargs)

    def previous(*args, **kwargs):
        """previous(self) -> PyObject"""
        return _howto.PySwigIterator_previous(*args, **kwargs)

    def advance(*args, **kwargs):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _howto.PySwigIterator_advance(*args, **kwargs)

    def __eq__(*args, **kwargs):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _howto.PySwigIterator___eq__(*args, **kwargs)

    def __ne__(*args, **kwargs):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _howto.PySwigIterator___ne__(*args, **kwargs)

    def __iadd__(*args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _howto.PySwigIterator___iadd__(*args, **kwargs)

    def __isub__(*args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _howto.PySwigIterator___isub__(*args, **kwargs)

    def __add__(*args, **kwargs):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _howto.PySwigIterator___add__(*args, **kwargs)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _howto.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _howto.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

sizeof_char = _howto.sizeof_char
sizeof_short = _howto.sizeof_short
sizeof_int = _howto.sizeof_int
sizeof_float = _howto.sizeof_float
sizeof_double = _howto.sizeof_double
sizeof_gr_complex = _howto.sizeof_gr_complex
class howto_square_ff_sptr(object):
    """Proxy of C++ howto_square_ff_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> howto_square_ff_sptr
        __init__(self,  p) -> howto_square_ff_sptr
        """
        this = _howto.new_howto_square_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args, **kwargs):
        """__deref__(self)"""
        return _howto.howto_square_ff_sptr___deref__(*args, **kwargs)

    __swig_destroy__ = _howto.delete_howto_square_ff_sptr
    __del__ = lambda self : None;
    def history(*args, **kwargs):
        """history(self) -> unsigned int"""
        return _howto.howto_square_ff_sptr_history(*args, **kwargs)

    def output_multiple(*args, **kwargs):
        """output_multiple(self) -> int"""
        return _howto.howto_square_ff_sptr_output_multiple(*args, **kwargs)

    def relative_rate(*args, **kwargs):
        """relative_rate(self) -> double"""
        return _howto.howto_square_ff_sptr_relative_rate(*args, **kwargs)

    def start(*args, **kwargs):
        """start(self) -> bool"""
        return _howto.howto_square_ff_sptr_start(*args, **kwargs)

    def stop(*args, **kwargs):
        """stop(self) -> bool"""
        return _howto.howto_square_ff_sptr_stop(*args, **kwargs)

    def detail(*args, **kwargs):
        """detail(self) -> gr_block_detail_sptr"""
        return _howto.howto_square_ff_sptr_detail(*args, **kwargs)

    def set_detail(*args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _howto.howto_square_ff_sptr_set_detail(*args, **kwargs)

    def name(*args, **kwargs):
        """name(self) -> string"""
        return _howto.howto_square_ff_sptr_name(*args, **kwargs)

    def input_signature(*args, **kwargs):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _howto.howto_square_ff_sptr_input_signature(*args, **kwargs)

    def output_signature(*args, **kwargs):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _howto.howto_square_ff_sptr_output_signature(*args, **kwargs)

    def unique_id(*args, **kwargs):
        """unique_id(self) -> long"""
        return _howto.howto_square_ff_sptr_unique_id(*args, **kwargs)

    def basic_block(*args, **kwargs):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _howto.howto_square_ff_sptr_basic_block(*args, **kwargs)

    def check_topology(*args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _howto.howto_square_ff_sptr_check_topology(*args, **kwargs)

    def max_buffer_size(*args, **kwargs):
        """max_buffer_size(self) -> int"""
        return _howto.howto_square_ff_sptr_max_buffer_size(*args, **kwargs)

howto_square_ff_sptr_swigregister = _howto.howto_square_ff_sptr_swigregister
howto_square_ff_sptr_swigregister(howto_square_ff_sptr)

howto_square_ff_sptr.block = lambda self: howto_square_ff_block (self)
howto_square_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def square_ff(*args):
  """square_ff() -> howto_square_ff_sptr"""
  return _howto.square_ff(*args)
class howto_square2_ff_sptr(object):
    """Proxy of C++ howto_square2_ff_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> howto_square2_ff_sptr
        __init__(self,  p) -> howto_square2_ff_sptr
        """
        this = _howto.new_howto_square2_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args, **kwargs):
        """__deref__(self)"""
        return _howto.howto_square2_ff_sptr___deref__(*args, **kwargs)

    __swig_destroy__ = _howto.delete_howto_square2_ff_sptr
    __del__ = lambda self : None;
    def history(*args, **kwargs):
        """history(self) -> unsigned int"""
        return _howto.howto_square2_ff_sptr_history(*args, **kwargs)

    def output_multiple(*args, **kwargs):
        """output_multiple(self) -> int"""
        return _howto.howto_square2_ff_sptr_output_multiple(*args, **kwargs)

    def relative_rate(*args, **kwargs):
        """relative_rate(self) -> double"""
        return _howto.howto_square2_ff_sptr_relative_rate(*args, **kwargs)

    def start(*args, **kwargs):
        """start(self) -> bool"""
        return _howto.howto_square2_ff_sptr_start(*args, **kwargs)

    def stop(*args, **kwargs):
        """stop(self) -> bool"""
        return _howto.howto_square2_ff_sptr_stop(*args, **kwargs)

    def detail(*args, **kwargs):
        """detail(self) -> gr_block_detail_sptr"""
        return _howto.howto_square2_ff_sptr_detail(*args, **kwargs)

    def set_detail(*args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _howto.howto_square2_ff_sptr_set_detail(*args, **kwargs)

    def name(*args, **kwargs):
        """name(self) -> string"""
        return _howto.howto_square2_ff_sptr_name(*args, **kwargs)

    def input_signature(*args, **kwargs):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _howto.howto_square2_ff_sptr_input_signature(*args, **kwargs)

    def output_signature(*args, **kwargs):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _howto.howto_square2_ff_sptr_output_signature(*args, **kwargs)

    def unique_id(*args, **kwargs):
        """unique_id(self) -> long"""
        return _howto.howto_square2_ff_sptr_unique_id(*args, **kwargs)

    def basic_block(*args, **kwargs):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _howto.howto_square2_ff_sptr_basic_block(*args, **kwargs)

    def check_topology(*args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _howto.howto_square2_ff_sptr_check_topology(*args, **kwargs)

    def max_buffer_size(*args, **kwargs):
        """max_buffer_size(self) -> int"""
        return _howto.howto_square2_ff_sptr_max_buffer_size(*args, **kwargs)

howto_square2_ff_sptr_swigregister = _howto.howto_square2_ff_sptr_swigregister
howto_square2_ff_sptr_swigregister(howto_square2_ff_sptr)

howto_square2_ff_sptr.block = lambda self: howto_square2_ff_block (self)
howto_square2_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def square2_ff(*args):
  """square2_ff() -> howto_square2_ff_sptr"""
  return _howto.square2_ff(*args)
class gr_ofdm_tx_sptr(object):
    """Proxy of C++ gr_ofdm_tx_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_ofdm_tx_sptr
        __init__(self,  p) -> gr_ofdm_tx_sptr
        """
        this = _howto.new_gr_ofdm_tx_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args, **kwargs):
        """__deref__(self)"""
        return _howto.gr_ofdm_tx_sptr___deref__(*args, **kwargs)

    __swig_destroy__ = _howto.delete_gr_ofdm_tx_sptr
    __del__ = lambda self : None;
    def msgq(*args, **kwargs):
        """msgq(self) -> gr_msg_queue_sptr"""
        return _howto.gr_ofdm_tx_sptr_msgq(*args, **kwargs)

    def history(*args, **kwargs):
        """history(self) -> unsigned int"""
        return _howto.gr_ofdm_tx_sptr_history(*args, **kwargs)

    def output_multiple(*args, **kwargs):
        """output_multiple(self) -> int"""
        return _howto.gr_ofdm_tx_sptr_output_multiple(*args, **kwargs)

    def relative_rate(*args, **kwargs):
        """relative_rate(self) -> double"""
        return _howto.gr_ofdm_tx_sptr_relative_rate(*args, **kwargs)

    def start(*args, **kwargs):
        """start(self) -> bool"""
        return _howto.gr_ofdm_tx_sptr_start(*args, **kwargs)

    def stop(*args, **kwargs):
        """stop(self) -> bool"""
        return _howto.gr_ofdm_tx_sptr_stop(*args, **kwargs)

    def detail(*args, **kwargs):
        """detail(self) -> gr_block_detail_sptr"""
        return _howto.gr_ofdm_tx_sptr_detail(*args, **kwargs)

    def set_detail(*args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _howto.gr_ofdm_tx_sptr_set_detail(*args, **kwargs)

    def name(*args, **kwargs):
        """name(self) -> string"""
        return _howto.gr_ofdm_tx_sptr_name(*args, **kwargs)

    def input_signature(*args, **kwargs):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _howto.gr_ofdm_tx_sptr_input_signature(*args, **kwargs)

    def output_signature(*args, **kwargs):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _howto.gr_ofdm_tx_sptr_output_signature(*args, **kwargs)

    def unique_id(*args, **kwargs):
        """unique_id(self) -> long"""
        return _howto.gr_ofdm_tx_sptr_unique_id(*args, **kwargs)

    def basic_block(*args, **kwargs):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _howto.gr_ofdm_tx_sptr_basic_block(*args, **kwargs)

    def check_topology(*args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _howto.gr_ofdm_tx_sptr_check_topology(*args, **kwargs)

    def max_buffer_size(*args, **kwargs):
        """max_buffer_size(self) -> int"""
        return _howto.gr_ofdm_tx_sptr_max_buffer_size(*args, **kwargs)

gr_ofdm_tx_sptr_swigregister = _howto.gr_ofdm_tx_sptr_swigregister
gr_ofdm_tx_sptr_swigregister(gr_ofdm_tx_sptr)

gr_ofdm_tx_sptr.block = lambda self: gr_ofdm_tx_block (self)
gr_ofdm_tx_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_tx(*args, **kwargs):
  """ofdm_tx(unsigned int MCS=0, unsigned int inputQ_limit=1) -> gr_ofdm_tx_sptr"""
  return _howto.ofdm_tx(*args, **kwargs)
class gr_ofdm_rx_sptr(object):
    """Proxy of C++ gr_ofdm_rx_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_ofdm_rx_sptr
        __init__(self,  p) -> gr_ofdm_rx_sptr
        """
        this = _howto.new_gr_ofdm_rx_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args, **kwargs):
        """__deref__(self)"""
        return _howto.gr_ofdm_rx_sptr___deref__(*args, **kwargs)

    __swig_destroy__ = _howto.delete_gr_ofdm_rx_sptr
    __del__ = lambda self : None;
    def outputQ(*args, **kwargs):
        """outputQ(self) -> gr_msg_queue_sptr"""
        return _howto.gr_ofdm_rx_sptr_outputQ(*args, **kwargs)

    def history(*args, **kwargs):
        """history(self) -> unsigned int"""
        return _howto.gr_ofdm_rx_sptr_history(*args, **kwargs)

    def output_multiple(*args, **kwargs):
        """output_multiple(self) -> int"""
        return _howto.gr_ofdm_rx_sptr_output_multiple(*args, **kwargs)

    def relative_rate(*args, **kwargs):
        """relative_rate(self) -> double"""
        return _howto.gr_ofdm_rx_sptr_relative_rate(*args, **kwargs)

    def start(*args, **kwargs):
        """start(self) -> bool"""
        return _howto.gr_ofdm_rx_sptr_start(*args, **kwargs)

    def stop(*args, **kwargs):
        """stop(self) -> bool"""
        return _howto.gr_ofdm_rx_sptr_stop(*args, **kwargs)

    def detail(*args, **kwargs):
        """detail(self) -> gr_block_detail_sptr"""
        return _howto.gr_ofdm_rx_sptr_detail(*args, **kwargs)

    def set_detail(*args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _howto.gr_ofdm_rx_sptr_set_detail(*args, **kwargs)

    def name(*args, **kwargs):
        """name(self) -> string"""
        return _howto.gr_ofdm_rx_sptr_name(*args, **kwargs)

    def input_signature(*args, **kwargs):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _howto.gr_ofdm_rx_sptr_input_signature(*args, **kwargs)

    def output_signature(*args, **kwargs):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _howto.gr_ofdm_rx_sptr_output_signature(*args, **kwargs)

    def unique_id(*args, **kwargs):
        """unique_id(self) -> long"""
        return _howto.gr_ofdm_rx_sptr_unique_id(*args, **kwargs)

    def basic_block(*args, **kwargs):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _howto.gr_ofdm_rx_sptr_basic_block(*args, **kwargs)

    def check_topology(*args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _howto.gr_ofdm_rx_sptr_check_topology(*args, **kwargs)

    def max_buffer_size(*args, **kwargs):
        """max_buffer_size(self) -> int"""
        return _howto.gr_ofdm_rx_sptr_max_buffer_size(*args, **kwargs)

gr_ofdm_rx_sptr_swigregister = _howto.gr_ofdm_rx_sptr_swigregister
gr_ofdm_rx_sptr_swigregister(gr_ofdm_rx_sptr)

gr_ofdm_rx_sptr.block = lambda self: gr_ofdm_rx_block (self)
gr_ofdm_rx_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_rx(*args, **kwargs):
  """ofdm_rx(unsigned int Nrx=1, gr_msg_queue_sptr outQ=gr_msg_queue_sptr()) -> gr_ofdm_rx_sptr"""
  return _howto.ofdm_rx(*args, **kwargs)


